Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> game
Rule 1     game -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> PLAYER move
Rule 5     move -> DICE_MOVE NUMBER
Rule 6     move -> SNAKE_MOVE NUMBER TO NUMBER
Rule 7     move -> LADDER_MOVE NUMBER TO NUMBER

Terminals, with rules where they appear

DICE_MOVE            : 5
LADDER_MOVE          : 7
NUMBER               : 5 6 6 7 7
PLAYER               : 4
SNAKE_MOVE           : 6
TO                   : 6 7
error                : 

Nonterminals, with rules where they appear

game                 : 0
move                 : 4
statement            : 2 3
statements           : 1 3

Parsing method: SLR

state 0

    (0) S' -> . game
    (1) game -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . PLAYER move

    PLAYER          shift and go to state 4

    game                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> game .



state 2

    (1) game -> statements .
    (3) statements -> statements . statement
    (4) statement -> . PLAYER move

    $end            reduce using rule 1 (game -> statements .)
    PLAYER          shift and go to state 4

    statement                      shift and go to state 5

state 3

    (2) statements -> statement .

    $end            reduce using rule 2 (statements -> statement .)
    PLAYER          reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> PLAYER . move
    (5) move -> . DICE_MOVE NUMBER
    (6) move -> . SNAKE_MOVE NUMBER TO NUMBER
    (7) move -> . LADDER_MOVE NUMBER TO NUMBER

    DICE_MOVE       shift and go to state 7
    SNAKE_MOVE      shift and go to state 8
    LADDER_MOVE     shift and go to state 9

    move                           shift and go to state 6

state 5

    (3) statements -> statements statement .

    $end            reduce using rule 3 (statements -> statements statement .)
    PLAYER          reduce using rule 3 (statements -> statements statement .)


state 6

    (4) statement -> PLAYER move .

    $end            reduce using rule 4 (statement -> PLAYER move .)
    PLAYER          reduce using rule 4 (statement -> PLAYER move .)


state 7

    (5) move -> DICE_MOVE . NUMBER

    NUMBER          shift and go to state 10


state 8

    (6) move -> SNAKE_MOVE . NUMBER TO NUMBER

    NUMBER          shift and go to state 11


state 9

    (7) move -> LADDER_MOVE . NUMBER TO NUMBER

    NUMBER          shift and go to state 12


state 10

    (5) move -> DICE_MOVE NUMBER .

    $end            reduce using rule 5 (move -> DICE_MOVE NUMBER .)
    PLAYER          reduce using rule 5 (move -> DICE_MOVE NUMBER .)


state 11

    (6) move -> SNAKE_MOVE NUMBER . TO NUMBER

    TO              shift and go to state 13


state 12

    (7) move -> LADDER_MOVE NUMBER . TO NUMBER

    TO              shift and go to state 14


state 13

    (6) move -> SNAKE_MOVE NUMBER TO . NUMBER

    NUMBER          shift and go to state 15


state 14

    (7) move -> LADDER_MOVE NUMBER TO . NUMBER

    NUMBER          shift and go to state 16


state 15

    (6) move -> SNAKE_MOVE NUMBER TO NUMBER .

    $end            reduce using rule 6 (move -> SNAKE_MOVE NUMBER TO NUMBER .)
    PLAYER          reduce using rule 6 (move -> SNAKE_MOVE NUMBER TO NUMBER .)


state 16

    (7) move -> LADDER_MOVE NUMBER TO NUMBER .

    $end            reduce using rule 7 (move -> LADDER_MOVE NUMBER TO NUMBER .)
    PLAYER          reduce using rule 7 (move -> LADDER_MOVE NUMBER TO NUMBER .)

